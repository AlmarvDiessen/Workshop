//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/UnitSelectionActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UnitSelectionActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UnitSelectionActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UnitSelectionActions"",
    ""maps"": [
        {
            ""name"": ""Unit"",
            ""id"": ""7342491d-823e-462f-8c10-a73845654f31"",
            ""actions"": [
                {
                    ""name"": ""Selection"",
                    ""type"": ""Button"",
                    ""id"": ""89fd6ffa-799f-4fa4-b72a-57fb5b09d3cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ManualSelection"",
                    ""type"": ""Button"",
                    ""id"": ""7db8f153-9da0-4124-a7f8-b0a720dd0229"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a752ec7e-cc0b-4694-94e5-85efadc87d01"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b36a0c5-447a-47b6-bb4b-0dfbd010dc0f"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ManualSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb4527c9-3709-44f5-a3dd-c044a8a19eba"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ManualSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""678fac59-ade7-47c5-b6c8-53d51158cdb2"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ManualSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Unit
        m_Unit = asset.FindActionMap("Unit", throwIfNotFound: true);
        m_Unit_Selection = m_Unit.FindAction("Selection", throwIfNotFound: true);
        m_Unit_ManualSelection = m_Unit.FindAction("ManualSelection", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Unit
    private readonly InputActionMap m_Unit;
    private List<IUnitActions> m_UnitActionsCallbackInterfaces = new List<IUnitActions>();
    private readonly InputAction m_Unit_Selection;
    private readonly InputAction m_Unit_ManualSelection;
    public struct UnitActions
    {
        private @UnitSelectionActions m_Wrapper;
        public UnitActions(@UnitSelectionActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Selection => m_Wrapper.m_Unit_Selection;
        public InputAction @ManualSelection => m_Wrapper.m_Unit_ManualSelection;
        public InputActionMap Get() { return m_Wrapper.m_Unit; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitActions set) { return set.Get(); }
        public void AddCallbacks(IUnitActions instance)
        {
            if (instance == null || m_Wrapper.m_UnitActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnitActionsCallbackInterfaces.Add(instance);
            @Selection.started += instance.OnSelection;
            @Selection.performed += instance.OnSelection;
            @Selection.canceled += instance.OnSelection;
            @ManualSelection.started += instance.OnManualSelection;
            @ManualSelection.performed += instance.OnManualSelection;
            @ManualSelection.canceled += instance.OnManualSelection;
        }

        private void UnregisterCallbacks(IUnitActions instance)
        {
            @Selection.started -= instance.OnSelection;
            @Selection.performed -= instance.OnSelection;
            @Selection.canceled -= instance.OnSelection;
            @ManualSelection.started -= instance.OnManualSelection;
            @ManualSelection.performed -= instance.OnManualSelection;
            @ManualSelection.canceled -= instance.OnManualSelection;
        }

        public void RemoveCallbacks(IUnitActions instance)
        {
            if (m_Wrapper.m_UnitActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUnitActions instance)
        {
            foreach (var item in m_Wrapper.m_UnitActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnitActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UnitActions @Unit => new UnitActions(this);
    public interface IUnitActions
    {
        void OnSelection(InputAction.CallbackContext context);
        void OnManualSelection(InputAction.CallbackContext context);
    }
}
